{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","Components/GifGridItem.js","Components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","categorie","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAc5C,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACFN,GAAe,SAAAO,GAAI,OAAML,GAAN,mBAAqBK,OACxCJ,EAAc,KAId,SACI,uBACIK,KAAK,OACLC,MAAOP,EACPQ,SAfc,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCsBLO,EAnBM,SAACf,GAAc,IAAD,EACLZ,mBAAS,CAC/BmB,KAAM,GACNS,SAAS,IAHkB,mBACxBC,EADwB,KACjBC,EADiB,KAgB/B,OAVAC,qBAAU,WACNpB,EAAQC,GACHoB,MAAK,SAAAC,GACFH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAGtB,CAAChB,IAEGiB,GCRIK,EATK,SAAC,GAAuB,EAArBX,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC9B,OACI,sBAAKqB,UAAU,yCAAf,UACI,qBAAKC,IAAKtB,EAAKuB,IAAKb,IACpB,4BAAIA,QCCHc,EAAU,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EAEHe,EAAaf,GAAjCa,EAFuB,EAE7BN,KAAcS,EAFe,EAEfA,QAEtB,OACI,qCACI,6BAAKhB,IACJgB,GAAW,mBAAGO,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACKV,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aCdpBgB,EAAe,WAAO,IAAD,EACMvC,mBAAS,CAAC,cADhB,mBACvBwC,EADuB,KACXzC,EADW,KAG9B,OACI,qCACI,2CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQyC,EAAWnB,KAAI,SAAAoB,GAAS,OACpB,cAAC,EAAD,CAEI7B,SAAU6B,GADLA,Y,MCVjCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.633b0e0f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        setCategories( cats => [ inputValue, ...cats ])\n        setInputValue('')\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n\n","export const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=rqMSiyoOUk0Z2vVQ5F8rMU2ltsV6RcpV`\n    const resp = await fetch(url)\n    const { data } = await resp.json()\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n   \n    return gifs\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nconst useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n    }, [category])\n\n    return state\n}\n\nexport default useFetchGifs\n","import React from 'react';\n\nconst GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","// import React, { useState, useEffect } from 'react'\n import React from 'react'\nimport PropTypes from 'prop-types'\nimport useFetchGifs from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem'\n// import { getGifs } from '../helpers/getGifs'\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category)\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n            <div className=\"card-grid\">\n                {images.map(img =>\n                    <GifGridItem\n                        key={img.id}\n                        {...img} />\n                )}\n            </div>\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './Components/AddCategory';\nimport { GifGrid } from './Components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['One Punch'])\n\n    return (\n        <>\n            <h2>GifExpert</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            <ol>\n                {\n                    categories.map(categorie =>\n                        <GifGrid\n                            key={categorie}\n                            category={categorie}\n                        />\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}